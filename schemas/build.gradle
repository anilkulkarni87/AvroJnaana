import com.github.davidmc24.gradle.plugin.avro.GenerateAvroJavaTask
import com.github.davidmc24.gradle.plugin.avro.GenerateAvroProtocolTask
import com.github.davidmc24.gradle.plugin.avro.GenerateAvroSchemaTask


plugins {
    id 'java'
    id "com.github.davidmc24.gradle.plugin.avro" version "1.7.0"
    id "com.github.node-gradle.node" version "3.5.1"
}

group 'com.lavro'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url "https://clojars.org/repo/"
    }
}
configurations {
    customConversions
}

dependencies {
    customConversions(project(":custom-conversions"))
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    implementation "org.apache.avro:avro:1.11.1"
    implementation "com.github.javafaker:javafaker:1.0.2"
    implementation(project(":custom-conversions"))
    implementation(project(":custom-conversions"))

}

test {
    useJUnitPlatform()
}

task generateProtocol(type: GenerateAvroProtocolTask) {
    shouldRunAfter "build"
    source file("src/main/avro")
    include("**/*.avdl")
    outputDir = file("build/generated-main-avro-avpr")
}

task generateSchema(type: GenerateAvroSchemaTask){
    shouldRunAfter "build"
    shouldRunAfter "generateProtocol"
    source file("build/generated-main-avro-avpr")
    include("**/*.avpr")
    outputDir = file("build/generated-main-avro-avsc")
}

avro {
    enableDecimalLogicalType = false
    stringType = "CharSequence"
    conversionsAndTypeFactoriesClasspath.from(configurations.customConversions)
    logicalTypeFactoryClassNames.put("reversed", "com.lavro.ReversedLogicalTypeFactory")
    customConversionClassNames.add("com.lavro.ReversedConversion")
    logicalTypeFactoryClassNames.put("encrypted", "com.lavro.EncryptedLogicalTypeFactory")
    customConversionClassNames.add("com.lavro.EncryptedConversion")
}

task generateAvrodoc(type: NpxTask) {
    dependsOn(generateSchema)
    command = '@mikaello/avrodoc-plus'
    args = ['-i','build/generated-main-avro-avsc', '-o','../avrodoc.html']
    mustRunAfter tasks.withType(GenerateAvroJavaTask)
}