plugins{
    id'java'
    alias(libs.plugins.com.github.davidmc24.gradle.plugin.avro)
    alias(libs.plugins.com.github.node.gradle.node)
    id'checkstyle'
    alias(libs.plugins.org.openrewrite.rewrite)
    alias(libs.plugins.com.github.imflog.kafka.schema.registry.gradle.plugin)
    alias(libs.plugins.com.github.ben.manes.versions)
    alias(libs.plugins.nl.littlerobots.version.catalog.update)
}

group'com.lavro'
version'1.0-SNAPSHOT'


dependencies{
    testRuntimeOnly libs.org.junit.jupiter.junit.jupiter.engine
    testImplementation libs.org.junit.jupiter.junit.jupiter.api

    implementation libs.org.slf4j.slf4j.api
    implementation libs.org.slf4j.slf4j.simple
    implementation libs.org.apache.avro
    implementation libs.net.datafaker

    implementation(project(":schemas"))
    implementation(project(":custom-conversions"))

    implementation libs.org.apache.kafka.kafka.clients
    implementation libs.io.confluent.kafka.avro.serializer
//    rewrite("org.openrewrite.recipe:rewrite-static-analysis:1.1.0")


}

//def rewriteRunTask = tasks.named("rewriteRun")

test{
    useJUnitPlatform()
}

//rewrite{
//    activeRecipe("org.openrewrite.staticanalysis.CodeCleanup")
//}
checkstyle{
    toolVersion = libs.versions.checkstyle.get()
    configFile(file("config/checkstyle/checkstyle.xml"))
}


tasks.withType(Checkstyle) {
//    dependsOn(rewriteRunTask)
    reports{
        xml.required = true
        html.required = true
        html.stylesheet(resources.text.fromFile('config/xsl/checkstyle-custom.xsl'))

    }
}


schemaRegistry{
    url = 'http://localhost:8081'
    quiet.set(false)
    outputDirectory.set("schema-registry/results/")
    register{
        subject("customerrecord", "schemas/build/generated-main-avro-avsc/com/dataanada/customer/CustomerRecord.avsc", "AVRO")
    }
    config{
        subject("customerrecord", "FULL_TRANSITIVE")
    }
    compatibility{
        subject("customerrecord", "schemas/build/generated-main-avro-avsc/com/dataanada/customer/CustomerRecord.avsc", "AVRO")
    }
}
